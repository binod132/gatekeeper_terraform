name: Deploy Infrastructure

on:
  push:
    branches: [main]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #TF_ACTION_WORKING_DIR: 'k8s-gatekeeper'
  AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  #job1_create_eks:
  #  name: Create EKS cluster gitaction
  #  runs-on: ubuntu-latest
  #  defaults:
   #   run:
    #    working-directory: ./EKS-terraform

    #steps:
     # - uses: actions/checkout@v3
      #- uses: hashicorp/setup-terraform@v2

      #- name: Terraform Init
      #  id: init
      #  run: terraform init

      #- name: Terraform Validate
      ## run: terraform validate -no-color

      #- name: Terraform Plan
      #  id: plan
      #  run: terraform plan -no-color
       # continue-on-error: false

      #- name: Terraform Apply
      #  id: apply
      #  run: terraform apply -auto-approve

  job2_connect_to_eks:
    name: Connect to eks cluster gitaction
    runs-on: ubuntu-latest
   # needs: job1_create_eks

    steps:

      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Configure AWS credentials from Test account
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: us-west-1
      - name: Login to EKS
        run: |
          aws eks update-kubeconfig --name gitaction
          mkdir -p kubeconfig
          mv ~/.kube/config kubeconfig/
  
  job3_deploy_opa_gatekeeper:

    name: OPA gatekeeper
    runs-on: ubuntu-latest
    needs: job2_connect_to_eks
    defaults:
      run:
        working-directory: ./k8s-gatekeeper

    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: false
      
      - name: Terraform Apply
        id: apply
        run: terraform apply

      #- uses: actions-hub/kubectl@master
      #   KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
      #  with:
      #    args: get constraint